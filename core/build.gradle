plugins {
    id 'maven-publish'
}

apply plugin: 'kotlin-multiplatform'

def ideaActive = System.getProperty('idea.active') == 'true'

kotlin {
    if (ideaActive) {
        macosX64('native')
    } else {
        macosX64('macos64')
        linuxX64('linux64')
        mingwX64('windows64')
    }

    jvm {
        compilations.all {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    js {
        compilations.all {
            kotlinOptions {
                sourceMap = true
                moduleKind = "umd"
                metaInfo = true
            }
        }
    }
    
    sourceSets {
        commonMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib"
                api "org.jetbrains.kotlinx:kotlinx-io:$kotlinx_io_version"
            }
        }

        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                api "org.jetbrains.kotlinx:kotlinx-io-jvm:$kotlinx_io_version"

            }
        }
        jvmTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }

        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-js'
                api "org.jetbrains.kotlinx:kotlinx-io-js:$kotlinx_io_version"
            }
        }

        jsTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }

        nativeMain.dependencies {
            api "org.jetbrains.kotlinx:kotlinx-io-native:$kotlinx_io_version"
        }

        if (!ideaActive) {
            nativeMain {}

            nativeTest {}

            configure([linux64Main, macos64Main, windows64Main]) {
                dependsOn nativeMain
            }

            configure([linux64Test, macos64Test, windows64Test]) {
                dependsOn nativeTest
            }
        }
    }

    sourceSets.all {
        kotlin.srcDirs = ["$it.name/src"]
        resources.srcDirs = ["$it.name/resources"]
        languageSettings {
            progressiveMode = true
            useExperimentalAnnotation("kotlin.Experimental")
            useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes')
            useExperimentalAnnotation('kotlinx.io.core.ExperimentalIoApi')
        }
    }
}

publishing {
    def user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    def key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    repositories {
        maven {
            name = 'build'
            url = "$buildDir/maven"
        }
        maven {
            name = 'bintray'
            def bintrayOrg = project.bintrayOrg
            def bintrayRepository = project.bintrayRepository
            def bintrayPackage = project.bintrayPackage
            url = "https://api.bintray.com/maven/$bintrayOrg/$bintrayRepository/$bintrayPackage/;publish=0"
            credentials {
                username = user
                password = key
            }
        }
    }
}

afterEvaluate {
    task('publishToBuildRepository') { publish ->
        group = 'publishing'
        tasks.withType(PublishToMavenRepository) { task ->
            if (task.repository.name == 'build') {
                publish.dependsOn(task)
            }
        }
    }
}

apply from: rootProject.file('gradle/node-js.gradle')
apply from: rootProject.file('gradle/test-mocha-js.gradle')
